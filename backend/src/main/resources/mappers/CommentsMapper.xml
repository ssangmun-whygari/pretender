<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.pretender.myApp.mapper.CommentsMapper">
  
  	<select id="countAllCmnts" resultType="int">
  		SELECT COUNT(*) FROM reviews WHERE media_id = #{id} AND is_parent = 'Y'
  	</select>
	
	<select id="selectAllCmnts" resultType="com.pretender.myApp.model.CommentsVO">
    SELECT 
        r.no,
        r.members_id, 
        r.parent_no, 
        r.content, 
        r.post_date, 
        r.correct_date,
        r.is_deleted, 
        r.stars,
        m.image, 
        m.nickname,
        (SELECT COUNT(*) FROM review_likes WHERE reviews_no = r.no AND media_id = #{id}) AS likeCount,
        (SELECT COUNT(*) FROM reviews WHERE parent_no = r.no AND media_id = #{id}) AS replyCount
    FROM reviews r
    JOIN members m ON m.id = r.members_id
    WHERE r.media_id = #{id} AND r.is_parent = 'Y' 
    <choose>
        <when test="sortBy == 'no'">
            ORDER BY r.no DESC
        </when>
        <when test="sortBy == 'replyCount'">
        	ORDER BY replyCount DESC, r.no DESC
        </when>
        <otherwise>
            ORDER BY likeCount DESC, r.no DESC
        </otherwise>
    </choose>
    LIMIT #{startNo}, #{size}
	</select>



  <select id="selectAllRpls" resultType="com.pretender.myApp.model.CommentsDTO">
  	select r.no,r.members_id, r.parent_no, r.content, r.post_date, r.correct_date, r.is_deleted, m.image, m.nickname,
	(select count(*) from review_likes where reviews_no = r.no AND media_id = #{id}) as likeCount
	from reviews r join members m
	on m.id = r.members_id
	where r.media_id = #{ id } and r.is_parent='N' and parent_no = #{ parentId } 
	order by r.no asc 
	limit #{ startNo },#{ size }
  </select>
  
  <insert id="insertReviewLk">
  	insert into review_likes values(#{ mediaId }, #{ mediaType }, #{ reviewsNo }, #{ membersId })
  </insert>
  
  <delete id="deleteReviewLk">
    delete from review_likes 
    where media_id = #{ mediaId } and reviews_no = #{ reviewsNo } and members_id = #{ membersId } limit 1
  </delete>
  	
  <insert id="insertRvw" parameterType="com.pretender.myApp.model.ReviewDTO">
    <!-- 리뷰 번호 계산 -->
    <selectKey keyProperty="no" resultType="int" order="BEFORE">
      SELECT IFNULL(MAX(no), 0) + 1 FROM reviews WHERE media_id = #{ id } FOR UPDATE;
    </selectKey>

    <!-- 리뷰 삽입 -->
    INSERT INTO reviews (no, members_id, is_parent, parent_no, content, media_id, media_type)
    VALUES (#{no}, #{membersId}, #{isParent}, #{parentNo}, #{content}, #{id}, #{type})
  </insert>
  
  <update id="deleteRvw">
  	update reviews set is_deleted = 'Y' where no = #{ no } and media_id =#{ id } 
  </update>
  
  <update id="modifyRvw">
  	update reviews set content = #{ content }, correct_date = now() where no = #{ no } and media_id = #{ id }
  </update>
  
  <select id="myReviewlikeList" resultType="java.lang.Integer">
  	SELECT reviews_no FROM review_likes 
    WHERE members_id = #{ userId } and media_id= #{ contentId }
  </select>
  
  <insert id="insertRprt" parameterType="com.pretender.myApp.model.ReportDTO">
  	insert into report values(#{reporterId},#{reviewsNo},#{mediaId},#{mediaType},#{cause},#{message})
  </insert>
  
  </mapper>