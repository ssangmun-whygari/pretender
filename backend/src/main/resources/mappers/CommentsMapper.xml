<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.pretender.myApp.mapper.CommentsMapper">
  
  	<select id="countAllCmnts" resultType="int">
  		SELECT COUNT(*) FROM reviews WHERE media_id = #{id} AND is_parent = 'Y' AND media_type = #{type}
  	</select>
	
	<select id="selectAllCmnts" resultType="com.pretender.myApp.model.CommentsVO">
    SELECT 
        r.no,
        r.members_id, 
        r.parent_no, 
        r.content, 
        r.post_date, 
        r.correct_date,
        r.is_deleted, 
        r.stars,
        m.image, 
        m.nickname,
        (SELECT COUNT(*) FROM review_likes WHERE reviews_no = r.no AND media_id = #{id}) AS likeCount,
        (SELECT COUNT(*) FROM reviews WHERE parent_no = r.no AND media_id = #{id}) AS replyCount
    FROM reviews r
    JOIN members m ON m.id = r.members_id
    WHERE r.media_id = #{id} AND r.is_parent = 'Y' AND media_type = #{type} 
    <choose>
        <when test="sortBy == 'no'">
            ORDER BY r.no DESC
        </when>
        <when test="sortBy == 'replyCount'">
        	ORDER BY replyCount DESC, r.no DESC
        </when>
        <otherwise>
            ORDER BY likeCount DESC, r.no DESC
        </otherwise>
    </choose>
    LIMIT #{startNo}, #{size}
	</select>



  <select id="selectAllRpls" resultType="com.pretender.myApp.model.CommentsDTO">
  	select r.no,r.members_id, r.parent_no, r.content, r.post_date, r.correct_date, r.is_deleted, m.image, m.nickname,
	(select count(*) FROM review_likes WHERE reviews_no = r.no AND media_id = #{id}) as likeCount
	FROM reviews r JOIN members m
	on m.id = r.members_id
	WHERE r.media_id = #{ id } AND r.is_parent='N' AND parent_no = #{ parentId } AND media_type = #{type}
	ORDER BY r.no asc 
	LIMIT #{ startNo },#{ size }
  </select>
  
  <insert id="insertReviewLk">
  	insert into review_likes values(#{ mediaId }, #{ mediaType }, #{ reviewsNo }, #{ membersId })
  </insert>
  
  <delete id="deleteReviewLk">
    delete FROM review_likes 
    WHERE media_id = #{ mediaId } AND reviews_no = #{ reviewsNo } AND members_id = #{ membersId } AND media_type= #{ mediaType } LIMIT 1
  </delete>
  	
  <insert id="insertRvw" parameterType="com.pretender.myApp.model.ReviewDTO">
    <!-- 리뷰 번호 계산 -->
    <selectKey keyProperty="no" resultType="int" order="BEFORE">
      SELECT IFNULL(MAX(no), 0) + 1 FROM reviews WHERE media_id = #{ id } FOR UPDATE;
    </selectKey>

    <!-- 리뷰 삽입 -->
    INSERT INTO reviews (no, members_id, is_parent, parent_no, content, media_id, media_type)
    VALUES (#{no}, #{membersId}, #{isParent}, #{parentNo}, #{content}, #{id}, #{type})
  </insert>
  
  <update id="deleteRvw">
  	update reviews set is_deleted = 'Y' WHERE no = #{ no } AND media_id =#{ id } AND media_type= #{ mediaType }
  </update>
  
  <update id="modifyRvw">
  	update reviews set content = #{ content }, correct_date = now() WHERE no = #{ no } AND media_id = #{ id } AND media_type= #{ type }
  </update>
  
  <select id="myReviewlikeList" resultType="java.lang.Integer">
  	SELECT reviews_no FROM review_likes 
    WHERE members_id = #{ userId } AND media_id= #{ contentId } AND media_type= #{ mediaType }
  </select>
  
  <insert id="insertRprt" parameterType="com.pretender.myApp.model.ReportDTO">
  	INSERT into report values(#{reporterId},#{reviewsNo},#{mediaId},#{mediaType},#{cause},#{message})
  </insert>
  
  <select id="sameRprt" resultType="com.pretender.myApp.model.ReportDTO">
  	SELECT * FROM report WHERE reporter_id = #{reporterId} AND reviews_no = #{reviewsNo} AND media_id = #{mediaId} AND media_type = #{mediaType}
  </select>
  
  <select id="commentIdx" resultType="int">
  	  WITH RankedComments AS (
	    SELECT 
	        r.no, 
	        r.media_id, 
	        r.media_type, 
	        COALESCE(l.likeCount, 0) AS likeCount,
	        ROW_NUMBER() OVER (ORDER BY COALESCE(l.likeCount, 0) DESC, r.no DESC) AS commentIndex 
	    FROM reviews r
	    LEFT JOIN (
	        SELECT reviews_no, media_id, COUNT(*) AS likeCount
	        FROM review_likes
	        WHERE media_id = #{contentId}
	        AND media_type = #{type}
	        GROUP BY reviews_no, media_id
	    ) l ON r.no = l.reviews_no AND r.media_id = l.media_id
	    WHERE r.media_id = #{contentId} 
	    AND r.media_type = #{type}
	    AND r.parent_no = 0
	)
	SELECT commentIndex 
	FROM RankedComments 
	WHERE no = #{commentId}
  </select>
  
  <select id="replyIdx" resultType="int">
  	<![CDATA[
  	SELECT COUNT(*)
	FROM reviews 
	WHERE media_id = #{contentId}
	AND media_type = #{type} 
	AND parent_no = #{commentId}
	AND no < #{replyId} 
	 ]]>
  </select>
  
  <insert id="insertReview">
  	insert into reviews(
		no, members_id, content, media_id, media_type, stars
	) select #{no}, #{membersId}, #{text}, #{mediaId}, #{mediaType}, #{stars}
  </insert>
  
  <select id="selectAvailableNoFromReviewsTable" resultType="int">
  	select coalesce(max(no), 0) + 1 
  	from reviews
  	where media_id = #{mediaId} and media_type = #{mediaType}
  </select>
  
  </mapper>